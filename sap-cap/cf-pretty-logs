#!/usr/bin/env node
const readline = require("readline");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
  terminal: false,
});

// COLOR CODES
const color = {
  reset: "\x1b[0m",
  dim: "\x1b[2m",
  blue: "\x1b[34m",
  yellow: "\x1b[33m",
  red: "\x1b[31m",
  gray: "\x1b[90m",
  green: "\x1b[32m",
  white: "\x1b[37m",
};

// LOG LEVEL COLORS
const levelColors = {
  INFO: color.blue,
  WARN: color.yellow,
  ERROR: color.red,
  LOG: color.gray,
};

// LINE PROCESSING
rl.on("line", (line) => {
  // TODO - Add parameters to allow to configure log parsing
  //        - filter log level
  //        - show timestamp
  //        - exclude logs from BTP

  const match = line.match(/\{.*\}/);

  try {
    // Parse default JSON message
    const obj = JSON.parse(match[0]);
    const level = obj.level?.toUpperCase() || "LOG";
    const levelColor = levelColors[level] || color.white;
    const timestamp = obj.timestamp || new Date().toISOString(); // TODO - Use a better timestamp format
    const msg = obj.msg || JSON.stringify(obj, null, 2);
    const id = obj.correlation_id || obj.request_id || "â€”";

    console.log(
      `${color.dim}[${timestamp}]${color.reset} ${levelColor}[${level}]${color.reset} ${color.green}(${id})${color.reset}: ${msg}`
    );
    // TODO - Check for stracktrace and print it nicely if exists
  } catch (err) {
    // console.error("Failed to parse JSON log:", err.message);

    // Fallback for non-JSON lines
    // TODO - Add more sophisticated parsing if needed
    console.log(`${color.dim}${line}`);
  }
});
